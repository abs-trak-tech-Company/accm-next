// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  firstName      String
  lastName       String
  email          String          @unique
  phone          String?
  service        String?
  gender         Gender?
  country        String?
  educationLevel String?
  password       String
  role           Role            @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  profile        UserProfile?
  subscriptions  Subscription[]
  feedbacks      Feedback[]
  notifications  Notification[]
  trackProgress  TrackProgress[]
  paymentProofs  PaymentProof[]
  events         UserEvent[]
  enrollments    Enrollment[]
  cvs            CV[]
  personalDiscovery PersonalDiscovery?
}

model PersonalDiscovery {
  id                           String   @id @default(cuid())
  userId                       String   @unique
  user                         User     @relation(fields: [userId], references: [id])
  strengths                    String[]
  weaknesses                   String[]
  opportunities                String[]
  achievements                 String[]
  threats                      String[]
  familyAspirations            String[]
  careerAspirations            String[]
  financialBusinessAspirations String[]
  socialAspirations            String[]
  desiredPosition              String[]
  requiredSkills               String[]
  coursesAndTrainings          String[]
  strategies                   String[]
  shortTermGoals               String[]
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
}

model UserProfile {
  id          String   @id @default(cuid())
  bio         String?
  avatar      String?
  phoneNumber String?
  address     String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  duration      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  services      Service[]
}

model Subscription {
  id            String             @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  status        SubscriptionStatus
  user          User               @relation(fields: [userId], references: [id])
  userId        String
  plan          Plan               @relation(fields: [planId], references: [id])
  planId        String
  paymentProofs PaymentProof[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model PaymentProof {
  id             String        @id @default(cuid())
  imageUrl       String
  status         PaymentStatus
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Feedback {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrackProgress {
  id        String   @id @default(cuid())
  title     String
  progress  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  plan        Plan     @relation(fields: [planId], references: [id])
  planId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Publication {
  id        String   @id @default(cuid())
  title     String
  authors   String
  abstract  String
  externalUrl String
  publishedDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  content   String
  author    String
  role      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mentor {
  id        String   @id @default(cuid())
  name      String
  bio       String
  expertise String[]
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  role      String
  bio       String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DownloadableResource {
  id          String   @id @default(cuid())
  title       String
  description String
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  bannerUrl   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       UserEvent[]
}

model UserEvent {
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, eventId])
}

model Course {
  id                 String              @id @default(cuid())
  title              String
  subtitle           String
  description        String
  content            String              @db.Text
  duration           Int
  level              String
  categoryId         String
  category           Category            @relation(fields: [categoryId], references: [id])
  isFeatured         Boolean             @default(false)
  previewVideoUrl    String?
  lessons            Lesson[]
  enrollments        Enrollment[]
  learningObjectives LearningObjective[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Lesson {
  id          String             @id @default(cuid())
  title       String
  content     String             @db.Text
  order       Int
  duration    Int
  courseId    String
  course      Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completions LessonCompletion[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Enrollment {
  id               String             @id @default(cuid())
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  courseId         String
  course           Course             @relation(fields: [courseId], references: [id])
  progress         Int                @default(0)
  completedLessons LessonCompletion[]
  completedAt      DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@unique([userId, courseId])
}

model LessonCompletion {
  id           String     @id @default(cuid())
  enrollmentId String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  lessonId     String
  lesson       Lesson     @relation(fields: [lessonId], references: [id])
  completedAt  DateTime   @default(now())

  @@unique([enrollmentId, lessonId])
}

model LearningObjective {
  id       String @id @default(cuid())
  content  String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model CV {
  id             String   @id @default(cuid())
  userId         String
  fileName       String
  fileUrl        String
  uploadedAt     DateTime @default(now())
  analysisResult String?
  user           User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
