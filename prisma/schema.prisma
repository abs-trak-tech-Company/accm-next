// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  firstName             String
  lastName              String
  email                 String                 @unique
  phone                 String?
  service               String?
  gender                Gender?
  country               String?
  educationLevel        String?
  password              String
  role                  Role                   @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  profile               UserProfile?
  subscriptions         Subscription[]
  feedbacks             Feedback[]
  notifications         Notification[]
  trackProgress         TrackProgress[]
  paymentProofs         PaymentProof[]
  events                UserEvent[]
  enrollments           Enrollment[]
  cvs                   CV[]
  personalDiscovery     PersonalDiscovery?
  scholarshipAssessment ScholarshipAssessment?
  progressStatus ProgressStatus @default(PAYMENT_PENDING)
}

model PersonalDiscovery {
  id                           String   @id @default(cuid())
  userId                       String   @unique
  user                         User     @relation(fields: [userId], references: [id])
  strengths                    String[]
  weaknesses                   String[]
  opportunities                String[]
  achievements                 String[]
  threats                      String[]
  familyAspirations            String[]
  careerAspirations            String[]
  financialBusinessAspirations String[]
  socialAspirations            String[]
  desiredPosition              String[]
  requiredSkills               String[]
  coursesAndTrainings          String[]
  strategies                   String[]
  shortTermGoals               String[]
  documentAnalysis             String?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
}

model ScholarshipAssessment {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Education and Field
  educationLevel  String // Enum in the application: high_school, certificate, diploma, bachelors, masters, phd, other
  fieldPreference String // Enum: arts, sciences

  // Demographics
  ageRange String // Enum: under_18, 18_24, 25_34, 35_44, 45_54, 55_plus
  gender   String // Enum: male, female, non_binary, prefer_not_to_say, other

  // Employment Preferences
  employmentPreference String // Enum: self_employed, government, private
  selfEmploymentType   String? // Optional enum: profit, non_profit (only if self_employed)
  careerSector         String // Enum: academia, policy, industry

  // Personal Aspirations
  unpaidPassion   String @db.Text // What they love doing without pay
  personalPassion String @db.Text // What they're passionate about
  lifeGoal        String @db.Text // Problem they want to solve
  futureTitle     String // Desired title in 30 years
  futureTasks     String @db.Text // Description of future tasks
  requiredSkills  String @db.Text // Skills needed
  desiredCourses  String @db.Text // Courses needed

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model UserProfile {
  id          String   @id @default(cuid())
  bio         String?
  avatar      String?
  phoneNumber String?
  address     String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  duration      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  services      String[]
  features      String[]
}

model Subscription {
  id            String             @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  status        SubscriptionStatus
  user          User               @relation(fields: [userId], references: [id])
  userId        String
  plan          Plan               @relation(fields: [planId], references: [id])
  planId        String
  paymentProofs PaymentProof[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model PaymentProof {
  id             String        @id @default(cuid())
  imageUrl       String
  status         PaymentStatus
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Feedback {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrackProgress {
  id        String   @id @default(cuid())
  title     String
  progress  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Publication {
  id            String   @id @default(cuid())
  title         String
  authors       String
  abstract      String
  externalUrl   String
  publishedDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  content   String
  author    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mentor {
  id        String   @id @default(cuid())
  name      String
  bio       String
  expertise String[]
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  role      String
  bio       String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DownloadableResource {
  id          String   @id @default(cuid())
  title       String
  description String
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  bannerUrl   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       UserEvent[]
}

model UserEvent {
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, eventId])
}

model Course {
  id                 String              @id @default(cuid())
  title              String
  subtitle           String
  description        String
  content            String              @db.Text
  duration           Int
  level              String
  categoryId         String
  category           Category            @relation(fields: [categoryId], references: [id])
  isFeatured         Boolean             @default(false)
  previewVideoUrl    String?
  lessons            Lesson[]
  enrollments        Enrollment[]
  learningObjectives LearningObjective[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Lesson {
  id          String             @id @default(cuid())
  title       String
  content     String             @db.Text
  order       Int
  duration    Int
  courseId    String
  course      Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completions LessonCompletion[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Enrollment {
  id               String             @id @default(cuid())
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  courseId         String
  course           Course             @relation(fields: [courseId], references: [id])
  progress         Int                @default(0)
  completedLessons LessonCompletion[]
  completedAt      DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@unique([userId, courseId])
}

model LessonCompletion {
  id           String     @id @default(cuid())
  enrollmentId String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  lessonId     String
  lesson       Lesson     @relation(fields: [lessonId], references: [id])
  completedAt  DateTime   @default(now())

  @@unique([enrollmentId, lessonId])
}

model LearningObjective {
  id       String @id @default(cuid())
  content  String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model CV {
  id             String   @id @default(cuid())
  userId         String
  fileName       String
  fileUrl        String
  uploadedAt     DateTime @default(now())
  analysisResult String?
  user           User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// This is your Prisma schema file

model CareerUser {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Basic user information - required for all users
  name           String
  email          String?  // Optional, only if user wants to save/share results
  age            String   // Age range rather than specific age
  gender         String?
  location       String?  // Country/region
  
  // Authentication related fields
  isAuthenticated Boolean @default(false)
  authUserId      String? @unique  // External auth provider user ID (if logged in)
  
  // Relationship with assessments
  assessments    CareerAssessment[]

  @@index([email])
  @@index([authUserId])
  @@map("career_users")
}

model CareerAssessment {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Link to CareerUser (can be anonymous or authenticated)
  careerUser  CareerUser @relation(fields: [careerUserId], references: [id])
  careerUserId String
  
  // Assessment Status
  status      AssessmentStatus @default(IN_PROGRESS)
  completedAt DateTime?
  
  // Educational Background
  education   String
  field       String
  
  // Career Preferences
  employment    String  // Self/Government/Private
  selfEmployment String? // Business/Non-profit (if employment is Self)
  sector        String  // Academia/Policy/Industry
  
  // Personal Aspirations
  passion       String   @db.Text
  lifePassion   String   @db.Text
  lifeGoal      String   @db.Text
  futureTitle   String
  futureTasks   String   @db.Text
  
  // Skills and Education Planning
  requiredSkills   String   @db.Text
  requiredCourses  String   @db.Text
  
  // Results
  suggestedCareer  String?
  confidenceScore  Float?
  matchingFactors  String[]  // Factors that influenced the career suggestion
  
  // Feedback and Sharing
  userFeedback     UserFeedback?
  isShared         Boolean      @default(false)
  shareCode        String?      @unique // For sharing results via link
  
  @@index([careerUserId])
  @@index([status])
  @@index([shareCode])
  @@map("career_assessments")
}

model UserFeedback {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  
  // Relationship with assessment
  assessment        CareerAssessment @relation(fields: [assessmentId], references: [id])
  assessmentId      String   @unique
  
  // Feedback data
  rating            Int // 1-5 rating
  isRelevant        Boolean
  comments          String?  @db.Text
  wouldRecommend    Boolean
  
  @@map("user_feedback")
}

// Analytics for improving suggestions
model CareerAnalytics {
  id                String   @id @default(cuid())
  careerPath        String   @unique
  totalSuggestions  Int      @default(0)
  averageConfidence Float    @default(0)
  positiveRatings   Int      @default(0)
  negativeRatings   Int      @default(0)
  
  // Demographic breakdowns
  ageRangeDistribution Json?  // Distribution across age ranges
  genderDistribution   Json?  // Distribution across genders
  fieldDistribution    Json?  // Distribution across educational fields
  
  updatedAt     DateTime @updatedAt

  @@map("career_analytics")
}

enum AssessmentStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

// Index for faster analytics queries
model AnalyticsIndex {
  id            String   @id @default(cuid())
  date          DateTime @default(now())
  totalUsers    Int      @default(0)
  activeUsers   Int      @default(0)
  completionRate Float   @default(0)
  
  // Daily statistics
  newAssessments    Int @default(0)
  completedAssessments Int @default(0)
  sharedResults     Int @default(0)
  
  @@index([date])
  @@map("analytics_index")
}

enum ProgressStatus {
  PAYMENT_PENDING
  PERSONAL_DISCOVERY_PENDING
  CV_ALIGNMENT_PENDING
  SCHOLARSHIP_MATRIX_PENDING
  ESSAYS_PENDING
  COMPLETED
}

enum Role {
  USER
  ADMIN
  MENTOR
  TEAM_MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
